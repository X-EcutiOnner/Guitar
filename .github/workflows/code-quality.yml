name: Code Quality

on:
  workflow_dispatch:

jobs:
  lint-and-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ruby \
          qmake6 \
          libqt6core6 \
          libqt6gui6 \
          libqt6svg6-dev \
          libqt6core5compat6-dev \
          zlib1g-dev \
          libgl1-mesa-dev \
          libssl-dev \
          qt6-base-dev \
          qt6-svg-dev \
          cppcheck \
          clang-format
          
    - name: Prepare environment
      run: ruby prepare.rb
      
    - name: Static analysis with cppcheck
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=noExplicitConstructor \
          src/ 2> cppcheck-result.xml || true
          
    - name: Upload cppcheck results
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-results
        path: cppcheck-result.xml
      if: always()
      
    - name: Check code formatting (if .clang-format exists)
      run: |
        if [ -f ".clang-format" ]; then
          find src/ -name "*.cpp" -o -name "*.h" | xargs clang-format -i
          git diff --exit-code || (echo "Code formatting issues found. Please run clang-format." && exit 1)
        else
          echo "No .clang-format file found, skipping format check"
        fi
        
    - name: Check for common issues
      run: |
        echo "Checking for common C++ issues..."
        
        # Check for potential memory leaks (basic patterns)
        echo "Checking for potential memory management issues..."
        grep -r "new " src/ --include="*.cpp" --include="*.h" | grep -v "delete" | head -10 || true
        
        # Check for TODO/FIXME comments
        echo "Checking for TODO/FIXME comments..."
        grep -r -n "TODO\|FIXME\|XXX" src/ --include="*.cpp" --include="*.h" || echo "No TODO/FIXME found"
        
        # Check for debug prints that might have been left in
        echo "Checking for debug output..."
        grep -r -n "qDebug\|printf\|cout\|std::cout" src/ --include="*.cpp" --include="*.h" | head -10 || echo "No obvious debug output found"
        
    - name: Verify translation files
      run: |
        echo "Checking translation files..."
        ls -la src/resources/translations/ || echo "No translations directory found"
        
    - name: Generate compilation database
      run: |
        rm -fr _build_guitar
        mkdir _build_guitar
        cd _build_guitar
        qmake6 "CONFIG+=release" ../Guitar.pro
        # Note: qmake doesn't generate compile_commands.json by default
        # This would require additional setup for proper IDE integration
        
    - name: Build test (dry run)
      run: |
        cd _build_guitar
        make -n | head -20  # Show what would be built without actually building
